// Plex Watch Together - Database Schema
// Modern database schema for secure watch parties with Plex integration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User management with NextAuth.js integration
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Hashed password for credentials auth
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Plex integration
  plexUsername  String?
  plexToken     String?   // Encrypted Plex authentication token
  plexServerId  String?   // User's primary Plex server
  plexUrl       String?   // Plex server URL
  
  // Performance tracking
  lastActiveAt  DateTime  @default(now())
  sessionCount  Int       @default(0)

  // Relationships
  accounts      Account[]
  sessions      Session[]
  createdRooms  WatchRoom[] @relation("RoomCreator")
  roomMembers   RoomMember[]
  messages      ChatMessage[]
  syncEvents    SyncEvent[]

  // Enhanced indexes for performance
  @@index([email])
  @@index([plexUsername])
  @@index([plexServerId])
  @@index([lastActiveAt])
  @@index([createdAt])
  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Watch room for synchronized viewing
model WatchRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  inviteCode  String   @unique @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Room settings
  allowChat   Boolean @default(true)
  maxMembers  Int     @default(10)
  isActive    Boolean @default(true)

  // Current media being watched
  currentMediaId       String?
  currentMediaTitle    String?
  currentMediaType     String? // movie, episode, etc.
  currentPosition      Float   @default(0) // Current playback position in seconds
  isPlaying            Boolean @default(false)
  lastSyncAt           DateTime @default(now())

  // Plex metadata
  plexRatingKey        String?
  plexMachineId        String?
  plexLibrarySectionId String?

  // Relationships
  creatorId    String
  creator      User           @relation("RoomCreator", fields: [creatorId], references: [id])
  members      RoomMember[]
  messages     ChatMessage[]
  syncEvents   SyncEvent[]
  invites      RoomInvite[]

  @@map("watch_rooms")
}

// Room membership and permissions
model RoomMember {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now())
  
  // Permissions
  canControl Boolean @default(false) // Can play/pause/seek
  canInvite  Boolean @default(false) // Can generate invite links
  isActive   Boolean @default(true)

  // User status in room
  lastSeen     DateTime @default(now())
  currentPosition Float @default(0) // User's current position for sync

  // Relationships
  userId String
  roomId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room   WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@map("room_members")
}

// Real-time chat messages
model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // Message types: text, system, media_change, user_join, user_leave
  type      String   @default("text")

  // Relationships
  userId String
  roomId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room   WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Synchronization events for debugging and analytics
model SyncEvent {
  id        String   @id @default(cuid())
  eventType String   // play, pause, seek, buffer
  timestamp DateTime @default(now())
  position  Float    // Position at time of event
  userId    String   // User who triggered the event

  // Relationships
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId String
  room   WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("sync_events")
}

// Verification tokens for NextAuth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Performance monitoring
model PerformanceLog {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  operation   String   // Operation name (e.g., 'plex_search', 'video_sync')
  duration    Int      // Duration in milliseconds
  success     Boolean  @default(true)
  errorMsg    String?  // Error message if failed
  userId      String?  // User ID if applicable
  roomId      String?  // Room ID if applicable
  metadata    Json?    // Additional performance data
  
  // Performance analysis fields
  cpuUsage    Float?   // CPU usage percentage
  memoryUsage Float?   // Memory usage in MB
  cacheHit    Boolean? // Whether cache was hit
  queryCount  Int?     // Number of DB queries made
  
  // Indexes for performance analysis
  @@index([operation, timestamp])
  @@index([success, timestamp])
  @@index([userId, timestamp])
  @@index([roomId, timestamp])
  @@map("performance_logs")
}

// Room invitations system
model RoomInvite {
  id        String   @id @default(cuid())
  code      String   @unique // Short invite code
  roomId    String
  createdBy String   // User ID who created invite
  expiresAt DateTime
  maxUses   Int?     // Maximum number of uses (null = unlimited)
  usedCount Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  // Metadata
  inviteType String @default("public") // public, private, one-time
  
  // Relationships
  room      WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@index([code])
  @@index([roomId])
  @@index([expiresAt])
  @@map("room_invites")
}

// Cache performance metrics
model CacheMetric {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  cacheType String   // redis, memory, database
  operation String   // get, set, delete, invalidate
  keyPattern String? // Pattern of cache key
  hitRate   Float?   // Cache hit rate percentage
  avgLatency Float?  // Average latency in ms
  errorRate Float?   // Error rate percentage
  dataSize  Int?     // Size of cached data in bytes
  
  @@index([cacheType, operation])
  @@index([timestamp])
  @@map("cache_metrics")
}

// Database query performance metrics
model QueryMetric {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  model     String   // Prisma model name
  operation String   // create, update, delete, findMany, etc.
  duration  Float    // Query duration in ms
  success   Boolean  @default(true)
  errorMsg  String?  // Error message if failed
  
  @@index([model, operation])
  @@index([timestamp])
  @@index([success])
  @@map("query_metrics")
}
