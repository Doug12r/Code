// Production Database Configuration
// Switch from SQLite to PostgreSQL for production scalability

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Connection pooling for production
  relationMode = "prisma"
}

// User management with NextAuth.js integration and enhanced performance
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // Hashed password for credentials auth
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Plex integration
  plexUsername  String?
  plexToken     String?   // Encrypted Plex authentication token
  plexServerId  String?   // User's primary Plex server
  plexUrl       String?   // Plex server URL
  
  // Performance tracking
  lastActiveAt  DateTime  @default(now()) @db.Timestamp(6)
  sessionCount  Int       @default(0) @db.Integer

  // Relationships
  accounts      Account[]
  sessions      Session[]
  createdRooms  WatchRoom[] @relation("RoomCreator")
  roomMembers   RoomMember[]
  messages      ChatMessage[]
  syncEvents    SyncEvent[]

  // Enhanced indexes for performance
  @@index([email])
  @@index([plexUsername])
  @@index([plexServerId])
  @@index([lastActiveAt])
  @@index([createdAt])
  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Watch room for synchronized viewing
model WatchRoom {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  inviteCode  String   @unique @default(cuid()) @db.VarChar(20)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  // Room settings
  allowChat   Boolean @default(true)
  maxMembers  Int     @default(10) @db.SmallInt
  isActive    Boolean @default(true)

  // Current media being watched
  currentMediaId       String?  @db.VarChar(50)
  currentMediaTitle    String?  @db.VarChar(200)
  currentMediaType     String?  @db.VarChar(20) // movie, episode, etc.
  currentPosition      Float    @default(0) @db.DoublePrecision // Current playback position in seconds
  isPlaying            Boolean  @default(false)
  lastSyncAt           DateTime @default(now()) @db.Timestamp(6)

  // Plex metadata
  plexRatingKey        String? @db.VarChar(50)
  plexMachineId        String? @db.VarChar(50)
  plexLibrarySectionId String? @db.VarChar(50)

  // Relationships
  creatorId    String
  creator      User           @relation("RoomCreator", fields: [creatorId], references: [id])
  members      RoomMember[]
  messages     ChatMessage[]
  syncEvents   SyncEvent[]

  // Indexes for performance
  @@index([creatorId])
  @@index([isPublic, isActive])
  @@index([inviteCode])
  @@map("watch_rooms")
}

// Room membership and permissions
model RoomMember {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now()) @db.Timestamp(6)
  
  // Permissions
  canControl Boolean @default(false) // Can play/pause/seek
  canInvite  Boolean @default(false) // Can generate invite links
  isActive   Boolean @default(true)

  // User status in room
  lastSeen        DateTime @default(now()) @db.Timestamp(6)
  currentPosition Float    @default(0) @db.DoublePrecision // User's current position for sync

  // Relationships
  userId String
  roomId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room   WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@index([roomId])
  @@index([userId])
  @@map("room_members")
}

// Real-time chat messages
model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(6)

  // Message types: text, system, media_change, user_join, user_leave
  type      String   @default("text") @db.VarChar(20)

  // Relationships
  userId String
  roomId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room   WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, createdAt])
  @@index([userId])
  @@map("chat_messages")
}

// Enhanced synchronization events for debugging and analytics
model SyncEvent {
  id        String   @id @default(cuid())
  eventType String   @db.VarChar(20) // play, pause, seek, buffer, sync_request
  timestamp DateTime @default(now()) @db.Timestamp(6)
  position  Float    @db.DoublePrecision // Position at time of event
  
  // Enhanced sync data for performance analysis
  syncVersion    Int      @default(0) @db.Integer
  latency        Int?     @db.Integer // Network latency when event occurred
  buffering      Boolean  @default(false)
  playbackRate   Float    @default(1.0) @db.DoublePrecision
  
  // Client information for analytics
  clientId       String?  @db.VarChar(50) // Socket ID or client identifier
  userAgent      String?  @db.VarChar(500) // For analytics
  
  // Performance metrics
  processedAt    DateTime? @db.Timestamp(6)
  processingTime Int?     @db.Integer // Time to process in ms

  // Relationships
  userId String
  roomId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room   WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  // Enhanced indexes for analytics and performance
  @@index([roomId, timestamp])
  @@index([userId, timestamp])
  @@index([eventType])
  @@index([timestamp])
  @@index([syncVersion])
  @@index([latency])
  @@map("sync_events")
}// Verification tokens for NextAuth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enhanced performance monitoring and metrics
model PerformanceLog {
  id            String   @id @default(cuid())
  endpoint      String   @db.VarChar(100)
  method        String   @db.VarChar(10)
  responseTime  Int      // in milliseconds
  statusCode    Int      @db.SmallInt
  userId        String?
  userAgent     String?  @db.VarChar(500)
  ipAddress     String?  @db.VarChar(45) // IPv6 compatible
  timestamp     DateTime @default(now()) @db.Timestamp(6)
  
  // Error details
  errorType     String?  @db.VarChar(50)
  errorMessage  String?  @db.Text
  
  // Additional performance context
  memoryUsage   Float?   @db.DoublePrecision // Memory usage at time of request
  cpuUsage      Float?   @db.DoublePrecision // CPU usage percentage
  cacheHit      Boolean? // Whether request was served from cache
  
  @@index([endpoint, timestamp])
  @@index([userId, timestamp])
  @@index([statusCode, timestamp])
  @@index([responseTime])
  @@index([cacheHit])
  @@map("performance_logs")
}

// Room invites with expiration and usage tracking
model RoomInvite {
  id         String   @id @default(cuid())
  code       String   @unique @default(cuid()) @db.VarChar(30)
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  expiresAt  DateTime @db.Timestamp(6)
  usedAt     DateTime? @db.Timestamp(6)
  maxUses    Int      @default(1) @db.SmallInt
  usedCount  Int      @default(0) @db.SmallInt
  isActive   Boolean  @default(true)

  // Relationships
  roomId    String
  createdBy String
  room      WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([roomId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("room_invites")
}

// Cache management and performance tracking
model CacheMetric {
  id         String   @id @default(cuid())
  cacheKey   String   @db.VarChar(200)
  cacheType  String   @db.VarChar(50) // Type of cached data
  operation  String   @db.VarChar(20) // get, set, delete, hit, miss
  timestamp  DateTime @default(now()) @db.Timestamp(6)
  hitCount   Int      @default(0) @db.Integer
  lastHitAt  DateTime? @db.Timestamp(6)
  dataSize   Int?     @db.Integer // Size in bytes
  ttl        Int?     @db.Integer // TTL in seconds
  
  @@index([cacheKey])
  @@index([cacheType])
  @@index([operation])
  @@index([timestamp])
  @@index([lastHitAt])
  @@map("cache_metrics")
}

// Database query performance tracking
model QueryMetric {
  id            String   @id @default(cuid())
  queryName     String   @db.VarChar(100) // Named query identifier
  model         String   @db.VarChar(50)  // Prisma model name
  operation     String   @db.VarChar(30)  // findMany, create, update, etc.
  duration      Int      @db.Integer      // Query duration in ms
  timestamp     DateTime @default(now()) @db.Timestamp(6)
  success       Boolean  @default(true)
  errorType     String?  @db.VarChar(50)
  recordCount   Int?     @db.Integer      // Number of records affected
  
  // Query context
  userId        String?
  roomId        String?
  
  @@index([queryName])
  @@index([model, operation])
  @@index([duration])
  @@index([timestamp])
  @@index([success])
  @@map("query_metrics")
}